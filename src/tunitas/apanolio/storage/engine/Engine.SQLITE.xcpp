// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
#forward tunitas.apanolio.storage.engine.Engine.declaration
namespace tunitas::apanolio::storage::engine {
  template<> struct Engine<SQLITE>;
}
#endiv
#divert <hpp>
#import std.filesystem.path
#import tunitas.apanolio.storage.engine.Prototype
namespace tunitas::apanolio::storage::engine {
  template<> class Engine<SQLITE> : public Prototype {
    using ancestor = Prototype;
  public:
    inline explicit Engine(std::filesystem::path storage_directory);
    auto probe(Identifier const &) -> Success final;
    auto get(Identifier const &) -> Outcome<Record> final;
    auto set(Identifier const &, Record const &) -> Success final;
  protected:
    std::filesystem::path storage_directory;
  };
}
#endiv
#divert <ipp>
namespace tunitas::apanolio::storage::engine {
  Engine<SQLITE>::Engine(std::filesystem::path storage_directory)
    : storage_directory{storage_directory}
  { }
}
#endiv
#divert <cpp>
namespace tunitas::apanolio::storage::engine {
  auto Engine<SQLITE>::probe(Identifier const &) -> Success {
    return Success{std::error_code{error::Code::NOT_IMPLEMENTED}};
  }
  auto Engine<SQLITE>::get(Identifier const &) -> Outcome<Record> {
    return Outcome<Record>{std::error_code{error::Code::NOT_IMPLEMENTED}};
  }
  auto Engine<SQLITE>::set(Identifier const &, Record const &) -> Success {
    return Success{std::error_code{error::Code::NOT_IMPLEMENTED}};
  }
}
#endiv
