// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE for terms.
#divert <fpp>
#forward tunitas.apanolio.storage.engine.Engine.declaration
namespace tunitas::apanolio::storage::engine {
  template<> struct Engine<SCARPET>;
}
#endiv
#divert <hpp>
#import std.filesystem.path
#import tunitas.apanolio.storage.engine.Prototype
#import tunitas.apanolio.storage.engine.configuration.Configuration.SCARPET
#import tunitas.apanolio.storage.engine.state.State.SCARPET
namespace tunitas::apanolio::storage::engine {
  template<> struct Engine<SCARPET> : public Prototype {
    using Configuration = configuration::Configuration<SCARPET>;
    using State = state::State<SCARPET>;
    explicit Engine(Configuration const &);
    auto probe(Identifier const &) -> Success final;
    auto get(Identifier const &) -> Outcome<Record> final;
    auto set(Identifier const &, Record const &) -> Success final;
  protected:
    State state;
  };
}
#endiv
#divert <cpp>
namespace tunitas::apanolio::storage::engine {
  Engine<SCARPET>::Engine(Configuration const &) {
    throw nonstd::exception::Unimplemented{__FUNCTION__, __FILE__, __LINE__};
  }
  auto Engine<SCARPET>::probe(Identifier const &) -> Success {
    return Success{std::error_code{error::Code::NOT_IMPLEMENTED}};
  }
  auto Engine<SCARPET>::get(Identifier const &) -> Outcome<Record> {
    return Outcome<Record>{std::error_code{error::Code::NOT_IMPLEMENTED}};
  }
  auto Engine<SCARPET>::set(Identifier const &, Record const &) -> Success {
    return Success{std::error_code{error::Code::NOT_IMPLEMENTED}};
  }
}
// https://tools.ietf.org/rfc/rfc6891.txt, 2013-04, Extension Mechanisms for DNS (EDNS(0))
// https://tools.ietf.org/html/rfc5507, 2009-04, Design Choices When Expanding the DNS
// 
// https://kb.isc.org/docs/aa-00356
// If you attempt to create an SPF or TXT record with a long string (>255 characters) in it, BIND will give an error (e.g. "invalid rdata format: ran out of space".)  Strings in SPF and TXT records should be no longer than 255 characters.  However to get around this limitation, per RFC 4408 a TXT or SPF record is allowed to contain multiple strings, which should be concatenated together by the reading application.  In the case of use for SPF (using either TXT or SPF RRs) the strings are concatenated together without spaces as described below.  Reassembly by other applications of multiple strings stored in TXT records might work differently.
#endiv
