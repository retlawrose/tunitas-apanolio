// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tunitas::apanolio::storage {
  //
  // The abstraction of the storage (engine).
  // Storage engines are constructed by RAII; either you get it or you have an exception. 
  //
  // Usage:
  //
  //   constexpr auto ENGINE = ...somehow...   one of NONE, MEMORY, FILES, LEVELDB, SQLITE, ...blah blah blah...
  //
  // Depending upon whether the engine takes a directory name or not
  //
  //   Storage store = storage::open<ENGINE>();
  //   Storage store = storage::open<ENGINE>(path);
  //
  //   auto probed = store.PROBE(identifier)
  //   auto found = ok(probed) && value(probed);
  //
  //   auto got = store.GET(identifier)
  //   if (ok(got)) { ... }
  //
  //   auto sat = store.SET(identifier, record);
  //   if (ok(sat)) { ... }
  //
  class Storage;
}
#endiv
#divert <hpp>
#import tunitas.apanolio.storage.engine.Name
#import tunitas.apanolio.storage.engine.Prototype
#import tunitas.apanolio.storage.open
#import tunitas.apanolio.resource.Identifier
#import tunitas.apanolio.resource.Record
#import tunitas.Success
#import tunitas.Outcome
#import std.unique_ptr
class tunitas::apanolio::storage::Storage {
public:
  using Identifier = resource::Identifier;
  using Record = resource::Record;
  Storage() = default;
  Storage(Storage const &) = delete;
  auto operator=(Storage const &) -> Storage & = delete;
  Storage(Storage &&) = default;
  auto operator=(Storage &&) -> Storage & = default;
  inline auto PROBE(Identifier const &) -> Success; // either SUCCESS or Code::MISSING or some other reason for the failure
  inline auto GET(Identifier const &) -> Outcome<Record>;
  inline auto SET(Identifier const &, Record const &) -> Success;
protected:
  using Engine = std::unique_ptr<engine::Prototype>;
  Engine engine;
  inline explicit Storage(engine::Prototype *);
  friend auto storage::open() -> Storage;
  template<engine::Name NAME> friend auto storage::open() -> Storage;
  template<engine::Name NAME> friend auto storage::open(std::filesystem::path) -> Storage;
  template<engine::Name NAME> friend auto storage::engine::configuration::open(Configuration<NAME> const &) -> Storage;
private:
  inline auto guarded_get() -> Engine::pointer;
  inline auto guarded_get() const -> Engine::element_type const *;
  template<typename ENGINE> inline static auto gettable(ENGINE &engine) -> decltype(engine.get());
};
#endiv
#divert <ipp>
#import tunitas.apanolio.exception.Null
namespace tunitas::apanolio::storage {
  Storage::Storage(engine::Prototype *pointer)
    : engine{pointer}
  { }
  template<typename ENGINE> auto Storage::gettable(ENGINE &engine) -> decltype(engine.get()) {
    auto got = engine.get(); // engine->get(identifier) is unsafe because the engine may be nullptr
    if (!got) {
      throw exception::Null{};
    }
    return got;
  }
  auto Storage::guarded_get() -> Engine::pointer { return gettable(engine); }
  auto Storage::guarded_get() const -> Engine::element_type const * { return gettable(engine); }
  auto Storage::PROBE(Identifier const &identifier) -> Success { return guarded_get()->probe(identifier); }
  auto Storage::GET(Identifier const &identifier) -> Outcome<Record> { return guarded_get()->get(identifier); }
  auto Storage::SET(Identifier const &identifier, Record const &record) -> Success { return guarded_get()->set(identifier, record); }
}
#endiv
