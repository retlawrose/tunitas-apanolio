// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE for terms.
#divert <fpp>
#import std.uint64_t
#import nonstd.uint128_t
#import std.underlying_type
#import rabinpoly.Fingerprint
namespace tunitas::apanolio::resource {
  //
  // Identifiers are expected to be <strike>64-bit</strike>128-bit bundles of bits.
  // These bits can be generated randomly or they can be generated by hasning or from a "fingerprinting" technique.
  //
  // The identifiers are expected to be globally unique across time and space.
  //
  enum Identifier : nonstd::uint128_t;
  namespace identifier {
    using Underlying = std::underlying_type<Identifier>::type;
    enum Generate { };
    // [[FIXTHIS]] move to 128-bit bundles with folly::Fingerprint<128>, c.f. https://github.com/facebook/folly/blob/master/folly/Fingerprint.h
    using Fingerprint = rabinpoly::Fingerprint;
  }
}
#endiv
#divert <hpp>
#import uuid.generate.random
namespace tunitas::apanolio::resource::identifier {
  inline auto construct(Fingerprint) -> Identifier;
  inline auto construct(uuid::Container) -> Identifier;
  // So that ADL can find it conveniently
  inline constexpr auto GENERATE = Generate{};
  inline auto construct(Generate) -> Identifier;
}
#endiv
#divert <ipp>
#import nonstd.uninitialized.copy
#import uuid.generate.random
namespace tunitas::apanolio::resource {
  auto identifier::construct(rabinpoly::Fingerprint precursor) -> Identifier {
    // Reminder ... this moves a 64-bit quantity into a 128-bit quantity.
    // [[FIXTHIS]]  use folly::Fingerprint<128> to get it done "right."
    return Identifier(precursor);
  }
  auto identifier::construct(uuid::Container precursor) -> Identifier {
    Identifier ret;
    static_assert(sizeof (Identifier) == sizeof (uuid::Container));
    nonstd::uninitialized::copy(reinterpret_cast<Identifier const *>(&precursor), 1, &ret);
    return ret;
  }
  auto identifier::construct(Generate) -> Identifier {
    return construct(uuid::generate::random());
  }
}
#endiv
