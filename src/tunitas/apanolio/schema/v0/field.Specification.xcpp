// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
#import tunitas.apanolio.schema.v0.Field
namespace tunitas::apanolio::schema::v0::field {
  //
  // The specification of the field
  // Name, limits, any other statically.
  //
  template<Field> struct Specification;
}
#endiv
#divert <hpp>
#import tunitas.apanolio.schema.v0.field.Limits
#import c.const_stringz
namespace tunitas::apanolio::schema::v0 {
  template<Field FIELD> struct field::Specification {
    using Literal = c::const_stringz;
    inline static auto literal() -> Literal;
    using Limits = field::Limits<FIELD>;
  };
}
#endiv
#divert <ipp>
namespace tunitas::apanolio::schema::v0::field {
  template<> inline auto Specification<Field::ID>::literal() -> Literal { return "id"; }
  template<> inline auto Specification<Field::EXPIRES>::literal() -> Literal { return "expires"; }
  template<> inline auto Specification<Field::TYPE>::literal() -> Literal { return "consentType"; }
  template<> inline auto Specification<Field::STATUS>::literal() -> Literal { return "status"; }
  template<> inline auto Specification<Field::ATTRIBUTES>::literal() -> Literal { return "attributes"; }
}
#endiv
