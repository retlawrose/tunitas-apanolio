// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <hpp>
#import std.ios
#import nonstd.required.Character_Traits
#import tunitas.time.put
namespace tunitas::apanolio::schema::io {
  //
  // The stream modifiers for the known types.
  // Identifiers are always printed as hexidecimal integers with full fill to the width of the identifier.
  //
  // Usage:
  //
  //   cout << " wow " << io::identifier << some_id << " wow "
  //
  inline auto identifier(std::ios &) -> std::ios &; // [[FIXTHIS]] maybe? to use ios_base and not be dependent upon ostreams
  //
  // Deal with time
  // https://en.cppreference.com/w/cpp/io/manip/put_time 
  //
  // Suggest:
  //   %s      seconds
  //   %FT%T   ISO 8601
  //
  // Usage:
  //
  //     auto point = time::Point{...somehow...};
  //     out << io::put(point, "%s") << '\n';
  //
  using tunitas::time::put;
}
#endiv
#divert <ipp>
#import std.hex
#import std.setw
#import std.setfill
#import tunitas.apanolio.resource.Identifier
namespace tunitas::apanolio::schema {
  auto io::identifier(std::ios &ios) -> std::ios & {
    auto const BYTES = sizeof (resource::Identifier);
    auto const BITS_per_BYTE = 8u;
    auto const BITS_per_CHAR = 4u;
    auto const IDENTIFIER_WIDTH = BYTES * BITS_per_BYTE / BITS_per_CHAR; // gives us chars
    static_assert(32u == IDENTIFIER_WIDTH);
    ios.width(IDENTIFIER_WIDTH);
    ios.fill('0'); //<------------- [[FIXTHIS]] cannot work against std::ios_base because we utter a (thin) character literal here
    ios.setf(std::ios::hex, std::ios::basefield);
    return ios;
  }
}
#endiv
