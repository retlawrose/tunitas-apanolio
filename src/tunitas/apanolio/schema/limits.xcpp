// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <hpp>
#import std.numeric_limits
#import std.uint16_t
#import std.uint64_t
#import std.size_t
#import tunitas.time.literals
namespace tunitas::apanolio::schema::limits {
  //
  // This is a policy statement for v0 and beyond (therefore ... all of them)
  //
  namespace id {
    //
    // Acknowledging that number ~=~ rabinpoly(number) for the small integers.
    // We're not allowing the "identifier" space to *not* be a fingerprint of "something random."
    //
    inline constexpr std::size_t MIN = 1u + std::numeric_limits<std::uint16_t>::max();
    inline constexpr std::size_t MAX = std::numeric_limits<std::uint64_t>::max() - MIN;
  }
  namespace expires {
    using namespace tunitas::time::literals;
    //
    // How far in the past or future?
    //
    inline constexpr auto FUTURE = 10_years;
    inline constexpr auto PAST = 2_years;
  }
  namespace consent {
    namespace type {
      //
      // Say what you have to say, be brief, be gone.
      // The consent types are short word enumerations in any case.
      // e.g.
      //  assumed
      //  explicit
      //  fanciful
      //  implicit
      //  imputed
      //  legitimate
      //  manifest
      //  manufactured
      //  presumed
      // etc.
      //
      inline constexpr auto LENGTH = 50u;
      inline constexpr std::size_t MIN = 1u; // i.e. can't be empty
      inline constexpr std::size_t MAX = LENGTH;
    }
    namespace status {
      //
      // TCF v1.1 can only be 2^16 in length.
      // TCF v2.0 can be ... ??? ...
      // TCF v3.0 can be ... ??? ...
      //
      // Kantara Consent Receipt (KCR) can be what?
      //
      inline constexpr auto LENGTH = 1u + std::numeric_limits<std::uint16_t>::max();
      inline constexpr std::size_t MIN = 1u; // [[FIXTHIS]] what's length of the shortest possible TCF?
      inline constexpr std::size_t MAX = LENGTH;
    }
  }
}
#endiv
