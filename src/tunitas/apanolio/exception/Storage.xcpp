// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tunitas::apanolio::exception {
  //
  // An storage error was encountered.
  // These may or may not be abstracted from System, which also accepts a std::error_code
  // Some storage errors are not related to the operating system; e.g. unexpected duplicate key, etc.
  //
  // Usage:
  //
  //   try {
  //     ...
  //     auto yuk = storage::error::Code::CORRUPT;
  //     throw exception::Storage{yuk,  "some excuse"};
  //     ...
  //   } catch (exception::Aspect const &) {
  //     ...handle it...
  //   } catch (std::exception const &) {
  //     ...handle it...
  //   }
  //
  class Storage;
}
#endiv
#divert <hpp>
#import tunitas.apanolio.exception.Aspect
#import tunitas.apanolio.error.Code
#import std.error_code
#import std.runtime_error
class tunitas::apanolio::exception::Storage : public exception::Aspect, public std::runtime_error {
  struct Ancestors {
    using Aspect = apanolio::exception::Aspect;
    using Exception = std::runtime_error;
  };
public:
  inline explicit Storage(error::Code);
  inline explicit Storage(std::error_code);
  inline Storage(error::Code, std::string const &reason);
  inline Storage(std::error_code, std::string const &reason);
  auto what() const noexcept -> char const * override;
  inline auto code() const noexcept -> std::error_code;
protected:
  std::error_code offending_error_code;
};
#endiv
#divert <ipp>
namespace tunitas::apanolio::exception {
  Storage::Storage(error::Code code)
    : Ancestors::Exception{"no reason given"}
    , offending_error_code{code}
  { }
  Storage::Storage(std::error_code ec)
    : Ancestors::Exception{"no reason given"}
    , offending_error_code{ec}
  { }
  Storage::Storage(error::Code code, std::string const &reason)
    : Ancestors::Exception{reason}
    , offending_error_code{code}
  { }
  Storage::Storage(std::error_code ec, std::string const &reason)
    : Ancestors::Exception{reason}
    , offending_error_code{ec}
  { }
  auto Storage::code() const noexcept -> std::error_code {
    return offending_error_code;
  }
}
#endiv
#divert <cpp>
auto tunitas::apanolio::exception::Storage::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
#endiv
