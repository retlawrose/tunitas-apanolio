// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tunitas::apanolio::exception {
  //
  // An invalid identifier was encountered
  //
  // It is reasonable to signal the appearance of bogus JSON by throwing this sort of exception.
  //
  // Usage:
  //
  //   try {
  //     ...
  //     throw Identifier{};
  //     ...
  //   } catch (exception::Aspect const &) {
  //     ...handle it...
  //   } catch (std::exception const &) {
  //     ...handle it...
  //   }
  //
  class Identifier;
}
#endiv
#divert <hpp>
#import tunitas.apanolio.exception.Aspect
#import std.invalid_argument
class tunitas::apanolio::exception::Identifier : public exception::Aspect, public std::invalid_argument {
  struct Ancestors {
    using Aspect = apanolio::exception::Aspect;
    using Exception = std::invalid_argument;
  };
public:
  // i.e. for when you don't have anything else to say
  inline Identifier();
  // e.g. "server config"
  inline explicit Identifier(std::string const &object);
  auto what() const noexcept -> char const * override;
};
#endiv
#divert <ipp>
namespace tunitas::apanolio::exception {
  Identifier::Identifier()
    : Ancestors::Exception{"identifier"}
  { }
  Identifier::Identifier(std::string const &object)
    : Ancestors::Exception{object}
  { }
}
#endiv
#divert <cpp>
auto tunitas::apanolio::exception::Identifier::what() const noexcept -> char const * {
  return Ancestors::Exception::what();
}
#endiv
