// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tunitas::apanolio::exception {
  //
  // The package version, as an application exception.
  //
  // Usage:
  //
  //   throw Version{"program"};
  //
  // Usage:
  //
  //   try {
  //     ...
  //     throw Version{"program"};
  //     ...
  //   } catch (tunitas::app::exception::Generic const &g) {
  //     g.stream() << g << '\n';
  //     return g.code();          ... equivalently ::exit(g.code());
  //   }
  //
  class [[nodiscard]] Version;
}
#endiv
#divert <hpp>
#import tunitas.app.exception.Version
#import tunitas.app.exception.Messaging
#import std.string
#import std.exception
class tunitas::apanolio::exception::Version : public tunitas::app::exception::Version, public tunitas::app::exception::Messaging, public std::exception {
  struct ancestors {
    using Version = tunitas::app::exception::Version;
    using Messaging = tunitas::app::exception::Messaging;
    using Exception = std::exception;
  };
public:
  inline explicit Version(std::string const &NAME);
  auto what() const noexcept -> char const * final;
private:
  static auto format(std::string const &NAME) -> std::string;
};
#endiv
#divert <ipp>
#import sys.exits.constants
tunitas::apanolio::exception::Version::Version(std::string const &NAME)
  : ancestors::Version{}
  , ancestors::Messaging{format(NAME)}
  , ancestors::Exception{}
{ }
#endiv
#divert <cpp>
#import std.ostringstream
#include "config.h"  // [[FIXTHIS]] #import autotools.autoconfig.Config.tunitas.apanolio.CONFIG
auto tunitas::apanolio::exception::Version::format(std::string const &NAME) -> std::string {
  std::ostringstream buf;
  auto const vstring = PACKAGE_VERSION; // [[FIXTHIS]] to acquire the version from configure.ac; a.k.a. config.h, autotools::autoconf::Config<CONFIG>::version_string()
  buf << "version: " << NAME << " " << vstring;
  return buf.str();
}
auto tunitas::apanolio::exception::Version::what() const noexcept -> char const * {
  return Messaging::what();
}
#endiv
