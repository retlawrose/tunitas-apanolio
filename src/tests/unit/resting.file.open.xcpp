// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <hpp>
#import std.string
#import tests.unit.resting.file.Pair
namespace tests {
  namespace unit {
    namespace resting {
      namespace file {
        inline auto open(Pair<std::string> const &names) -> Pair<int>;
      }
    }
  }
}
#endiv
#divert <ipp>
#import sys.posix.close
#import sys.posix.create
#import tunitas.apanolio.exception.System
auto tests::unit::resting::file::open(Pair<std::string> const &names) -> Pair<int> {
  using ::sys::posix::native::create; // [[FIXTHIS]] modify this to use the newfangled id::File and create(...) and close(id::File)
  auto c1 = create(names.first, 0666);
  // DO NOT open names.second ... the whole point is that we only 
  if (!ok(c1)) {
    using ::sys::posix::native::close; // [[FIXTHIS]] ibidem.
    // then kill them both
    close(value(c1));
    auto ec = std_system_error_code(c1);
    auto filename = names.first;
    auto message = "could not open " + filename;
    throw tunitas::apanolio::exception::System{ec, message};
  }
  int known_invalid = -1;
  Pair<int> ret(value(c1), known_invalid);
  return ret;
}
#endiv
