// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tests::unit::resting::buffer { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::resting::buffer::Fixture : public cppunit::test::Fixture {
public:
  auto test_gulp() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static constexpr auto const TEMPNAME_ITERATION_LIMIT = 10;
  static constexpr auto const GULP_ITERATION_SIZE_LIMIT = 9;
  inline static auto generate_content(std::size_t) -> std::string;
};
#endiv
#divert <cpp>
#import std.move
auto tests::unit::resting::buffer::Fixture::generate_content(std::size_t size) -> std::string {
  std::string ret;
  for (std::size_t i(0), e(size); e != i; ++i) {
    char ch = '0' + (i % 10);
    ret += ch;
  }
  if (ret.empty()) {
    ret = "empty!";
  }
  return ret;
}
#import apache.httpd.status.constants
#import tunitas.apanolio.resting.Buffer
#import tunitas.apanolio.resting.buffer.gulp
#import rigging.httpd.Dummy
#import std.cerr
auto tests::unit::resting::buffer::Fixture::test_gulp() -> void {
  rigging::httpd::Dummy<::apache::httpd::request_rec> dummy;
  for (std::size_t i(0), e(GULP_ITERATION_SIZE_LIMIT); e != i; ++i) {
    std::string specimen = generate_content(i);
    dummy.set_Content(specimen);
    dummy.prepare();
    tunitas::apanolio::resting::Buffer testbuff;
    auto s = tunitas::apanolio::resting::buffer::gulp(dummy, testbuff); // <---------------- testing this
    std::cerr << "status = " << (int)(status(s)) << '\n';
    CPPUNIT_ASSERT(::apache::httpd::status::HANDLER::OK == status(s));
    std::string expected = specimen;
    std::string actual = std::string{testbuff.begin(), testbuff.end()};
    CPPUNIT_ASSERT_EQUAL(expected, actual);
  }
}
#import tests.unit.resting.buffer.Buffer
#import tests.unit.resting.buffer.Gulp
#import rigging.suite.io
auto tests::unit::resting::buffer::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  namespace suite = ::rigging::suite;
  suite::Stream series("buffer");
  series << call("gulp", &Fixture::test_gulp)
         << add<Buffer>()
         << add<Gulp>()
    ;
  return finalize(series);
}
#endiv
