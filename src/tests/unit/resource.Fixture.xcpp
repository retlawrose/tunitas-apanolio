// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tests::unit::resource { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::resource::Fixture : public rigging::suite::Fixture {
  auto test_usage_Identifier() -> void;
  auto test_usage_Record() -> void;
  static auto suite() -> Suite;
};
#endiv
#divert <cpp>
#import tunitas.apanolio.resource.Identifier
auto tests::unit::resource::Fixture::test_usage_Identifier() -> void {
  using Subject = ::tunitas::apanolio::resource::Identifier;
  using Underlying = ::tunitas::apanolio::resource::identifier::Underlying;
  auto subject = Subject{};
  CPPUNIT_ASSERT(0 == (Underlying)subject);
}
#import tunitas.apanolio.resource.Record
auto tests::unit::resource::Fixture::test_usage_Record() -> void {
  using Subject = ::tunitas::apanolio::resource::Record;
  Subject subject;
  CPPUNIT_ASSERT(subject.empty());
}
#import tests.unit.resource.Identifier
#import tests.unit.resource.Record
auto tests::unit::resource::Fixture::suite() -> Suite {
  auto series = Stream{"resource"sv};
  {
    auto use = Stream{"usage"sv};
    use << add("Identifier", &Fixture::test_usage_Identifier)
        << add("Record", &Fixture::test_usage_Record)
        << END;
    series << move(use);
  }
  series << add<Identifier>()
         << add<Record>()
         << END;
  return settle(series);
}
#endiv
