// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tests::unit::want::rigging::exception { class Fixture; }
#endiv
#divert <hpp>
class tests::unit::want::rigging::exception::Fixture : public cppunit::test::Fixture {
public:
  auto test_SetUp() -> void;
  auto test_TearDown() -> void;
  template<typename EXCEPTION> auto test_Aspect() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <tpp>
#import want.rigging.exception.Aspect
#import want.rigging.exception.SetUp
#import want.rigging.exception.TearDown
namespace tests::unit::want::rigging::exception {
  template<typename EXCEPTION> auto Fixture::test_Aspect() -> void {
    try {
      auto subject = EXCEPTION{"badness at the edge of town"};
      throw subject;
    } catch (::want::rigging::exception::Aspect const &) {
      CPPUNIT_ASSERT(true);
    }
  }
}
#endiv
#divert <cpp>
namespace tests::unit::want::rigging::exception {
  auto Fixture::test_SetUp() -> void {
    ::want::rigging::exception::SetUp subject{"bad"};
    CPPUNIT_ASSERT_EQUAL("bad"s, subject.reason());
  }
  auto Fixture::test_TearDown() -> void {
    ::want::rigging::exception::TearDown subject{"bad"};
    CPPUNIT_ASSERT_EQUAL("bad"s, subject.reason());
  }
}
auto tests::unit::want::rigging::exception::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("exception");
  series << call("SetUp", &Fixture::test_SetUp)
         << call("TearDown", &Fixture::test_TearDown)
    ;
  {
    Stream asp("Aspect");
    asp << call("SetUp", &Fixture::test_Aspect<::want::rigging::exception::SetUp>)
        << call("TearDown", &Fixture::test_Aspect<::want::rigging::exception::TearDown>)
      ;
    series << move(asp);
  }
  return finalize(series);
}
#endiv
