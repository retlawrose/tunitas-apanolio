// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tests::unit::compiler { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::compiler::Fixture : public rigging::suite::Fixture {
  auto test_Interface() -> void;
  auto test_Interface_Guard() -> void;
  auto test_Log() -> void;
  static auto suite() -> Suite;
protected:
  struct Recompiler;
  struct Relog;
};
#endiv
#divert <cpp>
#import tests.unit.compiler.Fixture.Recompiler
auto tests::unit::compiler::Fixture::test_Interface() -> void {
  Recompiler recompiler;
  Recompiler::Object object;
  recompiler.grab(object); // testing grab, check, identify, sanitize, release as API calls.
  CPPUNIT_ASSERT(recompiler.check());
  if (recompiler.check()) {
    auto identifier = recompiler.identify();
    auto record = recompiler.sanitize();
    // the Recompiler doesn't produce anything meaningful
    CPPUNIT_ASSERT(decltype(identifier){} == identifier);
    CPPUNIT_ASSERT(record.empty());
  }
  recompiler.release();
}
#import tunitas.apanolio.schema.compiler.Interface.Guard
auto tests::unit::compiler::Fixture::test_Interface_Guard() -> void {
  Recompiler recompiler;
  Recompiler::Object object;
  Recompiler::Guard guard{recompiler, object}; // <----------------- testing this
  CPPUNIT_ASSERT(recompiler.check());
  if (recompiler.check()) {
    auto identifier = recompiler.identify();
    auto record = recompiler.sanitize();
    // the Recompiler doesn't produce anything meaningful
    CPPUNIT_ASSERT(decltype(identifier){} == identifier);
    CPPUNIT_ASSERT(record.empty());
  }
  // NO NEED --> recompiler.release() <-- NO NEED
}
#import tests.unit.compiler.Fixture.Relog
auto tests::unit::compiler::Fixture::test_Log() -> void {
  Relog relog;
  CPPUNIT_ASSERT(true);
}
auto tests::unit::compiler::Fixture::suite() -> Suite {
  auto series = Stream{"compiler"sv};
  series << add("Interface", &Fixture::test_Interface)
         << add("Interface::Guard", &Fixture::test_Interface_Guard)
         << add("Log", &Fixture::test_Log)
         << END;
  return settle(series);
}
#endiv
