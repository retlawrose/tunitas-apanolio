// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
#import tests.unit.engine.Engine.declaration
namespace tests::unit::engine { template<> class Engine<RAMCLOUD>; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.apanolio.storage.engine.configuration.Configuration.RAMCLOUD
#import tunitas.apanolio.storage.engine.Engine.RAMCLOUD
namespace tests::unit::engine {
  template<> class Engine<RAMCLOUD> : public cppunit::test::Fixture {
  public:
    using Configuration = ::tunitas::apanolio::storage::engine::configuration::Configuration<RAMCLOUD>;
    using Subject = ::tunitas::apanolio::storage::engine::Engine<RAMCLOUD>;
    auto test_constructor() -> void;
    auto test_nocopy() -> void;
    auto test_nomove() -> void;
    auto test_probe() -> void;
    auto test_get() -> void;
    auto test_set() -> void;
    static auto suite() -> cppunit::Test *;
  };
}
#endiv
#divert <cpp>
#import std.is_copy_constructible
#import std.is_copy_constructible
#import std.is_move_assignable
#import std.is_move_constructible
#import nonstd.exception.Unimplemented
namespace tests::unit::engine {
  auto Engine<RAMCLOUD>::test_constructor() -> void {
    try {
      Configuration cfg{};
      Subject subject{cfg};
      //
      // That's it ... it constructs.
      //
      CPPUNIT_ASSERT(sizeof (subject));
    } catch (nonstd::exception::Unimplemented const &) {
      CPPUNIT_ASSERT(true);
    }
  }
  auto Engine<RAMCLOUD>::test_nocopy() -> void {
    CPPUNIT_ASSERT(!std::is_copy_constructible<Subject>::value);
    CPPUNIT_ASSERT(!std::is_copy_assignable<Subject>::value);
  }
  auto Engine<RAMCLOUD>::test_nomove() -> void {
    CPPUNIT_ASSERT(!std::is_move_constructible<Subject>::value);
    CPPUNIT_ASSERT(!std::is_move_assignable<Subject>::value);
  }
  auto Engine<RAMCLOUD>::test_probe() -> void {
    try {
      Configuration cfg{};
      Subject subject{cfg};
      auto const zero = Subject::Identifier{0};
      auto probed = subject.probe(zero);
      CPPUNIT_ASSERT(!ok(probed));
    } catch (nonstd::exception::Unimplemented const &) {
      CPPUNIT_ASSERT(true);
    }
  }
  auto Engine<RAMCLOUD>::test_get() -> void {
    try {
      Configuration cfg{};
      Subject subject{cfg};
      auto const zero = Subject::Identifier{0};
      auto got = subject.get(zero);
      CPPUNIT_ASSERT(!ok(got));
    } catch (nonstd::exception::Unimplemented const &) {
      CPPUNIT_ASSERT(true);
    }
  }
  auto Engine<RAMCLOUD>::test_set() -> void {
    try {
      Configuration cfg{};
      Subject subject{cfg};
      auto const zero = Subject::Identifier{0};
      auto const record = Subject::Record{};
      auto sat = subject.set(zero, record);
      CPPUNIT_ASSERT(ok(sat));
    } catch (nonstd::exception::Unimplemented const &) {
      CPPUNIT_ASSERT(true);
    }
  }
}
#import rigging.suite.io
namespace tests::unit::engine {
  auto Engine<RAMCLOUD>::suite() -> cppunit::Test * {
    using namespace ::rigging::suite;
    Stream series("Engine<RAMCLOUD>");
    series << call("constructor", &Engine::test_constructor)
           << call("nocopy", &Engine::test_nocopy)
           << call("nomove", &Engine::test_nomove)
           << call("probe", &Engine::test_probe)
           << call("get", &Engine::test_get)
           << call("set", &Engine::test_set)
      ;
    return finalize(series);
  }
}
#endiv
