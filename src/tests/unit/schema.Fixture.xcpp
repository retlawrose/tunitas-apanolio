// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tests::unit::schema { class Fixture; }
#endiv
#divert <hpp>
struct tests::unit::schema::Fixture : public rigging::suite::Fixture {
  auto test_io_identifier() -> void;
  auto test_io_put() -> void;
  static auto suite() -> Suite;
};
#endiv
#divert <cpp>
#import tunitas.apanolio.schema.io // io::identifier
#import tunitas.apanolio.resource.Identifier
#import std.cerr
#import std.ostringstream
auto tests::unit::schema::Fixture::test_io_identifier() -> void {
  using ::tunitas::apanolio::schema::io::identifier;
  using ::tunitas::apanolio::resource::Identifier;
  {
    std::ostringstream buf;
    buf << identifier << Identifier{};
    auto syntax = buf.str();
    std::cerr << "debug: q(" << syntax << ") - length " << syntax.size() << "\n";
    auto const expected = (4lu * 2 * sizeof (nonstd::uint128_t)) /*bits*/ / 4 /*bits/char-nibble*/ ;
    CPPUNIT_ASSERT_EQUAL(expected, syntax.size());
  } {
    std::ostringstream buf;
    auto some_id0 = Identifier{};
    buf << "wow--(hex)-->" << identifier << some_id0 << "<--(hex)--wow\n";
    auto some_id1 = Identifier{1};
    buf << "wow--(hex)-->" << identifier << some_id1 << "<--(hex)--wow\n";
    auto some_id2 = Identifier{2};
    buf << "wow--(hex)-->" << identifier << some_id2 << "<--(hex)--wow\n";
    std::cerr << buf.str();
  }
}
#import tunitas.apanolio.schema.io // io::put
#import tunitas.time.Clock
#import tunitas.time.Point
#import std.ostringstream
auto tests::unit::schema::Fixture::test_io_put() -> void {
  std::ostringstream buf;
  auto const point = ::tunitas::time::Clock::now();
  buf << "blah blah --->"
      << ::tunitas::apanolio::schema::io::put(point, "%Y-%m-%dT%H:%M:%S") // <------------ test this ... same as tunitas::time::put.
      << "<---blah blah";
  auto const syntax = buf.str();
  CPPUNIT_ASSERT(!syntax.empty());
}
#import tests.unit.schema.v0.Fixture
#import tests.unit.schema.v1.Fixture
#import tests.unit.schema.v2.Fixture
auto tests::unit::schema::Fixture::suite() -> Suite {
  Stream series{"schema"};
  series << []() {
              auto io = Stream{"io"sv};
              io << add("identifier", &Fixture::test_io_identifier)
                 << add("put", &Fixture::test_io_put)
                 << END;
              return io;
            }()
         << add<v0::Fixture>()
         << add<v1::Fixture>()
         << add<v2::Fixture>()
         << END;
  return settle(series);
}
#endiv
