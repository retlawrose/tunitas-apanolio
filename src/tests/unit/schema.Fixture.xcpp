// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.; Copyright 2020, Verizon Media
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tests::unit::schema { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::schema::Fixture : public cppunit::test::Fixture {
public:
  auto test_io_identifier() -> void;
  auto test_io_put() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import tunitas.apanolio.schema.io
auto tests::unit::schema::Fixture::test_io_identifier() -> void {
#warning WRITETHIS auto tests::unit::schema::Fixture::test_io_identifier() -> void
  CPPUNIT_ASSERT(true);
}
auto tests::unit::schema::Fixture::test_io_put() -> void {
#warning WRITETHIS auto tests::unit::schema::Fixture::test_io_put() -> void
  CPPUNIT_ASSERT(true);
}
#import tests.unit.schema.v0.Fixture
#import tests.unit.schema.v1.Fixture
#import tests.unit.schema.v2.Fixture
#import rigging.suite.io
auto tests::unit::schema::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"schema"};
  series << []() {
              Stream io("io");
              io << call("identifier", &Fixture::test_io_identifier)
                 << call("put", &Fixture::test_io_put)
                ;
              return move(io);
            }()
         << add<v0::Fixture>()
         << add<v1::Fixture>()
         << add<v2::Fixture>()
    ;
  return finalize(series);
}
#endiv
