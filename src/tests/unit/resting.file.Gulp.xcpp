// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace tests::unit::resting::file { class Gulp; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import rigging.httpd.fixture.Runtime // WATCHOUT - cricical to ensure the Apache Runtime system is initialized before the test
struct tests::unit::resting::file::Gulp : public cppunit::test::Fixture, private rigging::httpd::fixture::Runtime {
  auto setUp() -> void override final    { Runtime::setUp(); }
  auto tearDown() -> void override final { Runtime::tearDown(); }
  auto test_constructor() -> void;
  auto test_operator_call() -> void;
  auto test_accessors() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  static constexpr auto GENERATED_CONTENT_SIZE_LIMIT = 43498u; // some random magic value
};
#endiv
#divert <cpp>
#import rigging.httpd.Dummy
#import sys.posix.tmpdir
#import tests.unit.generate_some_content
#import tests.unit.resting.file.Unlinker
#import tunitas.apanolio.resting.file.File
#import tunitas.apanolio.resting.file.Gulp
auto tests::unit::resting::file::Gulp::test_constructor() -> void {
  rigging::httpd::Dummy<::apache::httpd::request_rec> dummy;
  tunitas::apanolio::resting::file::File testfile(sys::posix::tmpdir());
  Unlinker un(testfile.name());
  dummy.request.set_Content(generate_some_content(GENERATED_CONTENT_SIZE_LIMIT));
  dummy.prepare();
  tunitas::apanolio::resting::file::Gulp gulp(dummy, testfile); // <------ test this
}
#import tests.unit.resting.file.Unlinker
#import slurp.file.read
auto tests::unit::resting::file::Gulp::test_operator_call() -> void {
  rigging::httpd::Dummy<::apache::httpd::request_rec> dummy;
  tunitas::apanolio::resting::file::File testfile(sys::posix::tmpdir());
  Unlinker un(testfile.name());
  auto const expected = generate_some_content(GENERATED_CONTENT_SIZE_LIMIT);
  dummy.request.set_Content(std::string{expected});
  dummy.prepare();
  tunitas::apanolio::resting::file::Gulp gulp(dummy, testfile);
  auto gulped = gulp();// <------ test this
  bool okay = ok(gulped);
  detect_inadvertent_HTTP_OK(status(gulped));
  std::cerr << "okay=" << okay << '\n';
  CPPUNIT_ASSERT(ok(gulped));
  namespace HTTP = apache::httpd::status::HTTP;
  namespace handler = apache::httpd::status::handler;
  detect_inadvertent_HTTP_OK(status(gulped));
  CPPUNIT_ASSERT(handler::OK == status(gulped));
  CPPUNIT_ASSERT_EQUAL(expected.size(), size(gulped));
  testfile.finalize(tunitas::apanolio::resting::File::KEEP);
  auto slurped = ::slurp::file::read<std::string>(testfile.name());
  std::string actual = slurped;
  CPPUNIT_ASSERT_EQUAL(expected, actual);
}
auto tests::unit::resting::file::Gulp::test_accessors() -> void {
  // There are no accessors
  CPPUNIT_ASSERT(true);
}
#import rigging.suite.io
auto tests::unit::resting::file::Gulp::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series("Gulp");
  series << call("constructor", &Gulp::test_constructor)
         << call("operator()", &Gulp::test_operator_call)
         << call("accessors", &Gulp::test_accessors)
    ;
  return finalize(series);
}
#endiv
