// This is -*- c++ -*- C++2a in the stylings of S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019-2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See the LICENSE file in https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::storage { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
#import tunitas.apanolio.storage.engine.Engine
#import tunitas.apanolio.exception.Storage
#import nonstd.exception.Unimplemented
class tests::unit::storage::Fixture : public cppunit::test::Fixture {
public:
  auto test_open_function() -> void;
  using Name = ::tunitas::apanolio::storage::engine::Name;
  template<Name ENGINE> auto test_open_template0() -> void;
  template<Name ENGINE> auto test_open_template1() -> void;
  static auto suite() -> cppunit::Test *;
protected:
  struct exception {
    using Storage = ::tunitas::apanolio::exception::Storage;
    using Unimplemented = ::nonstd::exception::Unimplemented;
  };
};
#endiv
#divert <tpp>
#import tunitas.apanolio.storage.open
#import want.rigging.exception.TearDown
#import want.rigging.exception.Aspect
template<tests::unit::storage::Fixture::Name ENGINE> auto tests::unit::storage::Fixture::test_open_template0() -> void {
  try {
    try {
      auto stoage = ::tunitas::apanolio::storage::open<ENGINE>();
      CPPUNIT_ASSERT(true); // yup, got it!
    } catch (exception::Storage const &e) {
      std::cerr <<  "failed to open ENGINE=" << (int)ENGINE << " because " << e.what() << '\n';
      CPPUNIT_ASSERT(false); // did not expect this to fail
    } catch (exception::Unimplemented const &) {
      CPPUNIT_ASSERT(true); // ok never mind then
    }
  } catch (::want::rigging::exception::TearDown const &) {
    CPPUNIT_ASSERT(true); // never mind ... we could not tear down the test, which means there is junk in /tmp
  } catch (::want::rigging::exception::Aspect const &) {
    CPPUNIT_ASSERT(false); // because the rigging failed, failed to setUp, or to operate in some other way
  }
}
#import tests.unit.temporary.Directory
template<tests::unit::storage::Fixture::Name ENGINE> auto tests::unit::storage::Fixture::test_open_template1() -> void {
  try {
    temporary::Directory<ENGINE> tmpdir{"tests::unit::storage::Fixture"};
    try {
      auto storage = ::tunitas::apanolio::storage::open<ENGINE>((std::filesystem::path const &) tmpdir);
      CPPUNIT_ASSERT(true); // yup, got it!
    } catch (exception::Storage const &e) {
      std::cerr <<  "failed to open ENGINE=" << (int)ENGINE << " on " << (std::filesystem::path const &)tmpdir << " because " << e.what() << '\n';
      CPPUNIT_ASSERT(true); // no, that was a surprise
    } catch (exception::Unimplemented const &) {
      CPPUNIT_ASSERT(true); // ok never mind then
    }
  } catch (::want::rigging::exception::TearDown const &) {
    CPPUNIT_ASSERT(true); // never mind ... we could not tear down the test, which means there is junk in /tmp
  } catch (::want::rigging::exception::Aspect const &) {
    CPPUNIT_ASSERT(false); // because the rigging failed, failed to setUp, or to operate in some other way
  }
}
#endiv
#divert <cpp>
#import tunitas.apanolio.storage.open
auto tests::unit::storage::Fixture::test_open_function() -> void {
  try {
    try {
      auto stoage = ::tunitas::apanolio::storage::open();
      CPPUNIT_ASSERT(true); // yup, got it!
    } catch (exception::Storage const &e) {
      std::cerr <<  "failed to open() on noargs because " << e.what() << '\n';
      CPPUNIT_ASSERT(true); // no, that was a surprise
    } catch (exception::Unimplemented const &) {
      CPPUNIT_ASSERT(true); // ok never mind then
    }
  } catch (::want::rigging::exception::TearDown const &) {
    CPPUNIT_ASSERT(true); // never mind ... we could not tear down the test, which means there is junk in /tmp
  } catch (::want::rigging::exception::Aspect const &) {
    CPPUNIT_ASSERT(false); // because the rigging failed, failed to setUp, or to operate in some other way
  }
}
#import tunitas.apanolio.storage.engine.Engine
#import rigging.suite.io
auto tests::unit::storage::Fixture::suite() -> cppunit::Test * {
  using namespace ::rigging::suite;
  Stream series{"storage"};
  {
    Stream ope("open");
    namespace engine = ::tunitas::apanolio::storage::engine;
    ope << call("function", &Fixture::test_open_function)
        << call("NONE", &Fixture::test_open_template0<engine::NONE>)
        << call("MEMORY", &Fixture::test_open_template0<engine::MEMORY>)
        << call("FILES", &Fixture::test_open_template1<engine::FILES>)
        << call("LEVELDB", &Fixture::test_open_template1<engine::LEVELDB>)
        << call("SQLITE", &Fixture::test_open_template1<engine::SQLITE>)
      // the others are not ready for testing yet
    ;
    series << move(ope);
  }
  return finalize(series);
}
#endiv
