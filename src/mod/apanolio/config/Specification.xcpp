// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
namespace mod::apanolio::config {
  //
  // The specification of the module
  // This is the module context which is referenced once the server is flying.
  // It is built up during server initialization.
  //
  // Usage:
  //
  //    see the config parsing code
  //
  class Specification;
}
#endiv
#divert <hpp>
#import apache.httpd.config.Value.mod.apanolio.config
#import tunitas.apanolio.Storage
#import std.string
class mod::apanolio::config::Specification {
public:
  inline Specification();
  //
  // Defaults to 'none'
  // The names of the storage engines.
  // These are compile-time constants, but there may be further runtime enablement of the 
  //
  apache::httpd::config::Value<STORAGE_ENGINE> storage_engine;

  //
  // Defaults to /var/mod_apanolio
  // Relative paths are imputed to the ServerRoot
  //
  apache::httpd::config::Value<STORAGE_DIRECTORY> storage_directory;
  //
  // Defaults to "/"
  // Should be the same as the <Location...> in which the handler is configured
  // e.g.
  //     <Apanolio>
  //        StorageDirectory /var/mod_apanolio
  //        LocationPrefix /apanolio <....----------------- choose wisely (must match the <Location of the SetHandler declaration)
  //     </Apanolio>
  //     <Location /apanolio> <---------------------------- choose wisely
  //         SetHandler mod_apanolio <--------------------- compiled-in from the Config<CONFIG>::module_name()
  //     </Location>
  //
  apache::httpd::config::Value<LOCATION_PREFIX> location_prefix;
  //
  // One among many database engines.
  //
  tunitas::apanolio::Storage storage;
  //
  // See the elaborate multi-phasic startup procedure that apache httpd goes through.
  // We need to ensure that we don't "double start."
  //
  bool is_started;
};
#endiv
#divert <ipp>
#import autotools.autoconf.Config.mod.apanolio.CONFIG
mod::apanolio::config::Specification::Specification()
  : storage_directory(autotools::autoconf::Config<CONFIG>::storage_directory())
  , location_prefix("/")
  , is_started{false}
{ }
#endiv
