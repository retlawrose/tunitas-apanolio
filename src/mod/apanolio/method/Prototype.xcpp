// This is -*- c++ -*- nearly C++23 with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright Yahoo Inc. 2021.
// Licensed under the terms of the Apache-2.0 license.
// For terms, see the LICENSE file at https://github.com/yahoo/tunitas-apanolio/blob/master/LICENSE
// For terms, see the LICENSE file at https://git.tunitas.technology/all/services/apanolio/tree/LICENSE
#divert <fpp>
#import apache.httpd.status.Code
#import apache.httpd.io
namespace mod::apanolio::method {
  namespace HTTP = apache::httpd::status::HTTP;
  namespace HANDLER = apache::httpd::status::handler;
  namespace io = apache::httpd::io;
}
namespace mod::apanolio::method {
  //
  // The method prototype (descendants only)
  // Every method (response) captures the apache request, the specification and a url parser.
  //
  // Usage: see Getter, Poster, Putter
  //
  class Prototype;
}
#endiv
#divert <hpp>
#import apache.httpd.Stream //    WATCHOUT ...
#import apache.httpd.io.Stream // WATCHOUT ... these two are gratuitously DIFFERENT [[FIXTHIS]]
#import apache.httpd.status.Code
#import apache.httpd.request_rec
#import mod.apanolio.config.Specification
#import tunitas.apanolio.uri.Parser
class mod::apanolio::method::Prototype {
protected:
  ~Prototype() = default;
public:
  inline Prototype(apache::httpd::request_rec *, config::Specification *);
  // The descendant must implement (the non-virtual)
  //   auto operator()() -> apache::httpd::status::Code;
protected:
  // Of course, the containing apache request record must have a longer lifetime than the method
  apache::httpd::request_rec *req;
  // Of course, the Specification must have a longer lifetime than the method (descendant)
  // Not const because we might need to omdify ... and even a GET isn't readonly activity
  config::Specification *spec;
  // ... because parsing occurs.
  tunitas::apanolio::uri::Parser uri_parser;
  // ... because every method handler will need to respond onto an html stream.
  apache::httpd::Stream rs;
};
#endiv
#divert <ipp>
mod::apanolio::method::Prototype::Prototype(apache::httpd::request_rec *req, config::Specification *spec)
  : req{req}
  , spec{spec}
  , uri_parser{spec->location_prefix.value}
  , rs{req}
{ }
#endiv
